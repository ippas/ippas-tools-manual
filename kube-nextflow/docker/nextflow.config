profiles {
    ippas_k8s {
        params {
            max_memory = '240.GB'
	    max_cpus   = 32
	    max_time   = '240.h'
        }

        process {
            withLabel:process_single {
                memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
            }
            withLabel:process_low {
                memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
            }

            withLabel:process_medium {
                memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
            }

            withLabel:process_high {
	        cpus   = { check_max( 14    * task.attempt, 'cpus'    ) }
                memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
                time   = { check_max( 72.h  * task.attempt, 'time'    ) }
            }
        }
    }
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
